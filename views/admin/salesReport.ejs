<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Admin Panel</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="/css/admin.css">
    <style>
      /* Custom Styles */
      .total-amount-card {
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 20px;
        margin: 10px 0;
      }

      .total-amount-card h4 {
        font-size: 1.5rem;
        font-weight: 600;
      }

      .total-amount-card .amount {
        font-size: 2rem;
        font-weight: 700;
        color: #28a745;
      }

      .total-amount-card.discount {
        background-color: #dbbee228;
        border: 1px solid #ffeeba;
      }

      .total-amount-card.sale {
        background-color: #323834;
        border: 1px solid #c3e6cb;
      }

      .total-amount-card i {
        font-size: 1.5rem;
        margin-right: 10px;
      }

      .amount-wrapper {
        display: flex;
        align-items: center;
      }
    </style>
  </head>
  <body>
    <div class="container-scroller">
      <!-- Sidebar -->
      <nav class="sidebar sidebar-offcanvas" id="sidebar">
        <div class="sidebar-brand-wrapper d-none d-lg-flex align-items-center justify-content-center fixed-top">
          <a class="sidebar-brand brand-logo" href="index.html">MEN'S HUB </a>
          <a class="sidebar-brand brand-logo-mini" href="index.html"><img src="/images/logo-mini.svg" alt="logo" /></a>
        </div>
        <ul class="nav">
          <li class="nav-item menu-items">
            <a class="nav-link" href="/admin/dashboard">
              <span class="menu-title">Dashboard</span>
            </a>
          </li>
          <li class="nav-item menu-items">
            <a class="nav-link" href="/admin/usermanagement">
              <span class="menu-title">User Management</span>
            </a>
          </li>
          <li class="nav-item menu-items">
            <a class="nav-link" href="/admin/products">
              <span class="menu-title">Products Management</span>
            </a>
          </li>
          <li class="nav-item menu-items">
            <a class="nav-link" href="/admin/ordermanagement">
              <span class="menu-title">Order Management</span>
            </a>
          </li>
          <li class="nav-item menu-items " >
            <a class="nav-link" href="/admin/categorymanagement">
              <span class="menu-title" >Category Management</span>
            </a>
          </li>
          <li class="nav-item menu-items">
            <a class="nav-link" href="/admin/couponmanagement">
              <span class="menu-title">Coupen Management</span>
            </a>
          </li>
          <li class="nav-item menu-items">
            <a class="nav-link" href="/admin/offermanagement">
              <span class="menu-title">Offer Management</span>
            </a>
          </li>
          <li class="nav-item menu-items forme">
            <a class="nav-link" href="/admin/salesReport">
              <span class="menu-title">sales Report</span>
            </a>
          </li>
        </ul>
      </nav>

    <!-- Main content -->
    <div class="container mt-5">
      <div class="row justify-content-center">
        <!-- Date Range Filter -->
        <div class="col-md-6">
            <form id="saleForm">
          <div class="form-inline justify-content-center" style="margin-top: 10%;">
            <label for="start-date" class="mr-2">From:</label>
            <input type="date" id="start-date" class="form-control mr-3">
            <label for="end-date" class="mr-2">To:</label>
            <input type="date" id="end-date" class="form-control mr-3">
            <button type="submit" id="filter-button" class="btn btn-primary">Filter</button>
        </div>
        </form>
        </div>
      </div>


        <!-- Buttons for Daily, Weekly, and Monthly -->
  <div class="row justify-content-center mt-3">
    <div class="col-md-6 text-center">
      <button class="btn btn-outline-primary mx-2" id="daily-button">Daily</button>
      <button class="btn btn-outline-secondary mx-2" id="weekly-button">Weekly</button>
      <button class="btn btn-outline-success mx-2" id="monthly-button">Monthly</button>
    </div>
  </div>

      <!-- Section for Total Sale Amount -->
<div id="order-details-section" class="mt-4">
    <div class="row justify-content-center">
      <div class="col-md-6">
        <div class="total-amount-card sale text-center">
          <div class="amount-wrapper justify-content-center">
            <i class="fas fa-dollar-sign"></i>
            <div>
              <h4>Total Sale Amount</h4>
              <p class="amount" id="total-sale-amount">Rs.0.00</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  

        <!-- Order Details Table -->
                <table id="order-table" class="table table-bordered mt-4" style="display: none;">
                    <thead>
                    <tr style="background-color: #323834; ">
                        <th  style="color: white;">ORDER ID</th>
                        <th  style="color: white;">CUSTOMER NAME</th>
                        <th  style="color: white;">SALE AMOUNT</th>
                        <th  style="color: white;">ORDER DATE</th>
                    </tr>
                    </thead>
                    <tbody style="color: white;">
                    <!-- Dynamic rows will be added here -->
                    </tbody>
                </table>
                <div class="d-flex justify-content-center align-items-center mt-2" style="height: 20h;">
                    <button id="Excel" class="btn btn-success mx-2">Excel</button>
                    <button id="pdf" class="btn btn-danger mx-2">Pdf</button>
                </div>
                

    <!-- Scripts -->
     <!--PDF DOWNLOAD SCRIPT-->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.25/jspdf.plugin.autotable.min.js"></script>
    <!--EXCEL DOWNLOAD SCRIPT-->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>

    
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Font Awesome for icons -->
    <script src="https://kit.fontawesome.com/a076d05399.js"></script>
  </body>
</html>


<!--CUSTOM DATE SALES REPORT-->
<script>
    const form = document.getElementById('saleForm');
    form.addEventListener('submit',async function(e){
        e.preventDefault();

        const startDate = document.getElementById('start-date').value;
        const endDate = document.getElementById('end-date').value;

        if(!startDate || !endDate) {
            swal.fire({
                title: 'Error',
                text: 'Please select a date range',
                icon: 'error',
                confirmButtonText: 'Okay'
            });
            return;
        }
        try{
        const response = await fetch(`/admin/salesreportdata?startDate=${startDate}&endDate=${endDate}`,{
            method:'GET',
            headers:{
                'Content-Type':'application/json'
            },
            
        })
        const result = await response.json();

        if(result.success){
            document.getElementById('total-sale-amount').textContent = `Rs.${result.totalSaleAmount.toFixed(2)}`;
            

            const tableBody =  document.querySelector('#order-table tbody');
            tableBody.innerHTML = '';

            if(result.orders.length > 0){
            result.orders.forEach(order => {
                const row = document.createElement('tr');

            row.innerHTML = `
                <td>${order.orderId}</td>
                <td>${order.customerName || 'N/A'}</td>
                <td>Rs.${(order.saleAmount || 0).toFixed(2)}</td>
                <td>${new Date(order.orderDate).toLocaleDateString()}</td>
            `;

                tableBody.appendChild(row)
            });
            document.getElementById('order-table').style.display = 'table';
          }else{
            document.getElementById('order-table').style.display = 'none';
          }
        }else{
            swal.fire({
                title: 'Error',
                text: result.message,
                icon: 'error',
                confirmButtonText: 'Okay'
            })
        }
    }catch(error){
        console.error(error);
        swal.fire({
            title: 'Error',
            text: 'An error occurred while fetching sales report',
            icon: 'error',
            confirmButtonText: 'Okay'
        })
    }
    })
</script>

<!--DIALY SALES REPORT-->
<script>
document.getElementById('daily-button').addEventListener('click', async function () {
    try {
        const today = new Date();
        const startDate = new Date(today.setHours(0, 0, 0, 0)).toISOString();
        const endDate = new Date(today.setHours(23, 59, 59, 999)).toISOString();

        const response = await fetch(`/admin/salesreportdata?startDate=${startDate}&endDate=${endDate}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
        });

        const result = await response.json();

        if (result.success) {
            document.getElementById('total-sale-amount').textContent =` Rs.${result.totalSaleAmount.toFixed(2)}`;
            const tableBody = document.querySelector('#order-table tbody');
            tableBody.innerHTML = ''; // Clear previous data

            if (result.orders.length > 0) {
                result.orders.forEach((order) => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${order.orderId}</td>
                        <td>${order.customerName || 'N/A'}</td>
                        <td>Rs.${(order.saleAmount || 0).toFixed(2)}</td>
                        <td>${new Date(order.orderDate).toLocaleDateString()}</td>
                    `;
                    tableBody.appendChild(row);
                });
                document.getElementById('order-table').style.display = 'table'; // Show the table
            } else {
                document.getElementById('order-table').style.display = 'none'; // Hide the table
            }
        } else {
            swal.fire({
                title: 'Error',
                text: result.message,
                icon: 'error',
                confirmButtonText: 'Okay',
            });
        }
    } catch (error) {
        console.error(error);
        swal.fire({
            title: 'Error',
            text: 'An error occurred while fetching the daily sales report',
            icon: 'error',
            confirmButtonText: 'Okay',
        });
    }
});
  </script>
  
<!--WEEKLY SALES REPORT-->
  <script>
    document.getElementById('weekly-button').addEventListener('click',async function(){
        try {
            const today = new Date();
            const dayOfWeek = today.getDay();
            const startOfWeek = new Date(today);
            const endOfWeek = new Date(today);

            startOfWeek.setDate(today.getDate()-dayOfWeek);
            startOfWeek.setHours(0,0,0,0);

            endOfWeek.setDate(today.getDate()+(6-dayOfWeek));
            endOfWeek.setHours(23,59,59,999);

            const response = await fetch(
      `/admin/salesreportdata?startDate=${startOfWeek.toISOString()}&endDate=${endOfWeek.toISOString()}`,
      {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
    const result = await response.json();

    if (result.success) {
      // Update total sale amount
      document.getElementById('total-sale-amount').textContent =` Rs.${result.totalSaleAmount.toFixed(2)}`;

      // Update the order table
      const tableBody = document.querySelector('#order-table tbody');
      tableBody.innerHTML = ''; // Clear previous data

      result.orders.forEach((order) => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${order.orderId}</td>
          <td>${order.customerName || 'N/A'}</td>
          <td>Rs.${(order.saleAmount || 0).toFixed(2)}</td>
          <td>${new Date(order.orderDate).toLocaleDateString()}</td>
        `;
        tableBody.appendChild(row);
      });

      document.getElementById('order-table').style.display = 'table'; // Show the table
    }else{
        swal.fire({
        title: 'Error',
        text: result.message,
        icon: 'error',
        confirmButtonText: 'Okay',
      });
    }
        } catch (error) {
            console.error(error);
            swal.fire({
                title: 'Error',
                text: 'An error occurred while fetching the weekly sales report',
                icon: 'error',
                confirmButtonText: 'Okay',
            })
        }
    })
  </script>

<!--MONTHLY SALES REPORT-->
  <script>
  document.getElementById('monthly-button').addEventListener('click', async function () {
    try {
        // Get the current date
        const today = new Date();

        // Calculate the start and end of the month
        const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1); // First day of the month
        const endOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0); // Last day of the month

        // Fetch the sales report
        const response = await fetch(`
            /admin/salesreportdata?startDate=${startOfMonth.toISOString().split('T')[0]}&endDate=${endOfMonth.toISOString().split('T')[0]}`,
            {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                },
            }
        );

        const result = await response.json();

        if (result.success) {
            // Update the total sales and orders table
            document.getElementById('total-sale-amount').textContent =` Rs.${result.totalSaleAmount.toFixed(2)}`;

            const tableBody = document.querySelector('#order-table tbody');
            tableBody.innerHTML = ''; // Clear previous data

            result.orders.forEach((order) => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${order.orderId}</td>
                    <td>${order.customerName || 'N/A'}</td>
                    <td>Rs.${(order.saleAmount || 0).toFixed(2)}</td>
                    <td>${new Date(order.orderDate).toLocaleDateString()}</td>
                `;
                tableBody.appendChild(row);
            });

            document.getElementById('order-table').style.display = 'table'; // Show the table
        } else {
            swal.fire({
                title: 'Error',
                text: result.message,
                icon: 'error',
                confirmButtonText: 'Okay',
            });
        }
    } catch (error) {
        console.error(error);
        swal.fire({
            title: 'Error',
            text: 'An error occurred while fetching the monthly sales report',
            icon: 'error',
            confirmButtonText: 'Okay',
        });
    }
});
</script>


<!--DOWNLAOD EXCEL SHEET-->
<script>
  document.getElementById('Excel').addEventListener('click', function () {
    const table = document.getElementById('order-table');
    if (!table || table.style.display === 'none') {
        swal.fire({
            title: 'Error',
            text: 'No data to export',
            icon: 'error',
            confirmButtonText: 'Okay',
        });
        return;
    }

    const rows = [];
    // Get table headers
    const headers = Array.from(table.querySelectorAll('thead th')).map((th) => th.textContent.trim());
    rows.push(headers);

    // Get table rows and convert NodeList to array
    const dataRows = Array.from(table.querySelectorAll('tbody tr'));
    dataRows.forEach((row) => {
        const cells = Array.from(row.querySelectorAll('td')).map((td) => td.textContent.trim());
        rows.push(cells);
    });

    // Create a new workbook and add data
    const workbook = XLSX.utils.book_new();
    const worksheet = XLSX.utils.aoa_to_sheet(rows);
    XLSX.utils.book_append_sheet(workbook, worksheet, 'Sales Report');

    // Export the workbook
    XLSX.writeFile(workbook, 'Sales_Report.xlsx');
});

</script>

<!--DOWNLAOD PDF-->
<script>
  document.getElementById('pdf').addEventListener('click',function(){
    const table = document.getElementById('order-table');
    if(!table || table.style.display === 'none'){
      swal.fire({
        title: 'Error',
        text: 'No data to export',
        icon: 'error',
        confirmButtonText: 'Okay',
      })
      return
    }

    const {jsPDF} = window.jspdf;
    const doc = new jsPDF()  
 
    const headers = Array.from(table.querySelectorAll('thead th')).map(th => th.textContent.trim());

    const rows = Array.from(table.querySelectorAll('tbody tr')).map(row => Array.from(row.querySelectorAll('td')).map(td=> td.textContent.trim())
  );

  doc.text('Sales Report',14,15);

  doc.autoTable({
    head:[headers],
    body:rows,
    startY:20.
  });

  doc.save('Sales_Report.pdf');
  })
</script>
