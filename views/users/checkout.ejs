<!-- /*
* Bootstrap 5
* Template Name: Furni
* Template Author: Untree.co
* Template URI: https://untree.co/
* License: https://creativecommons.org/licenses/by/3.0/
*/ -->
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
  <meta name="author" content="Untree.co" />
  <link rel="shortcut icon" href="favicon.png" />

  <meta name="description" content="" />
  <meta name="keywords" content="bootstrap, bootstrap4" />

  <!-- Bootstrap CSS -->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet" />
  <link href="/css/tiny-slider.css" rel="stylesheet" />
  <link rel="stylesheet" href="/css/style.css" />
  <link href="/css/bootstrap.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="/css/checkout.css" />
  <title>
    Furni Free Bootstrap 5 Template for Furniture and Interior Design Websites
    by Untree.co
  </title>
</head>

<body>
  <%- include("./layouts/header.ejs") %>
    <nav aria-label="breadcrumb" class="mb-4">
      <ol class="breadcrumb">
        <li class="breadcrumb-item">
          <a href="/home" class="d-flex align-items-center">
            <span style="color: rgb(27, 94, 27)">Home</span>
          </a>
        </li>
        <li class="breadcrumb-item active" aria-current="page">Checkout</li>
      </ol>
    </nav>

    <!-- Start Hero Section -->
    <div class="hero">
      <div class="container">
        <div class="row justify-content-between">
          <div class="col-lg-5">
            <div class="intro-excerpt">
              <h1>Checkout</h1>
            </div>
          </div>
          <div class="col-lg-7"></div>
        </div>
      </div>
    </div>
    <!-- End Hero Section -->

    <div class="untree_co-section">
      <div class="container">
        <div class="row mb-5">
          <div class="col-md-12">

          </div>
        </div>
        <div class="row">
          <div class="col-md-6 mb-5 mb-md-0">
            <h2 class="h3 mb-3 text-black">Billing Details</h2>
            <div style="display: flex; justify-content: end;">
              <button class="add-address" id="addAddress" onclick="addressAddForm(event)" style="width: 100px;">Add
                New</button>
              <button class="add-address" id="cancelAddress"
                style="display: none; background-color: #FFAB00; color: black;"
                onclick="cancelAddress(event)">cancel</button>
            </div>
            <div class="p-3 p-lg-5 border bg-white">
              <form id="addressForm" style="display: none;" onsubmit="addressFormValidation(event)">
                <input type="text" name="" id="houseNumber" placeholder="House Number">
                <p id="houseNumberError" style="color: red; font-size: 14px; margin-top: 5px;"></p>
                <input type="text" name="" id="street" placeholder="Street">
                <p id="streetError" style="color: red; font-size: 14px; margin-top: 5px;"></p>
                <input type="text" name="" id="city" placeholder="City">
                <p id="cityError" style="color: red; font-size: 14px; margin-top: 5px;"></p>
                <input type="text" name="" id="landmark" placeholder="Landmark">
                <p id="landmarkError" style="color: red; font-size: 14px; margin-top: 5px;"></p>
                <input type="text" name="" id="district" placeholder="District">
                <p id="districtError" style="color: red; font-size: 14px; margin-top: 5px;"></p>
                <input type="text" name="" id="state" placeholder="State">
                <p id="stateError" style="color: red; font-size: 14px; margin-top: 5px;"></p>
                <input type="text" name="" id="Country" placeholder="Country">
                <p id="CountryError" style="color: red; font-size: 14px; margin-top: 5px;"></p>
                <input type="text" name="" id="pinCode" placeholder="Pin Code">
                <p id="pinCodeError" style="color: red; font-size: 14px; margin-top: 5px;"></p>
                <button class="add-address">Create</button>
              </form>
              <% addresses.forEach((data, index)=> { %>
                <div data-id="<%= data._id %>" class="address-box">
                  <div class="address-boxes">
                    <!-- Radio button for selecting the address -->
                    <input type="radio" name="selectedAddress" id="address-<%= index %>" value="<%= data._id %>"
                      class="form-check-input" />
                    <label for="address-<%= index %>" class="form-check-label">
                      <p>House Number: <%= data.houseNumber %>
                      </p>
                      <p>Street: <%= data.street %>
                      </p>
                      <p>Landmark: <%= data.landmark %>
                      </p>
                      <p>City: <%= data.city %>
                      </p>
                      <p>District: <%= data.district %>
                      </p>
                      <p>State: <%= data.state %>
                      </p>
                      <p>Country: <%= data.country %>
                      </p>
                      <p>Pin Code: <%= data.pinCode %>
                      </p>
                    </label>
                  </div>
                  <!-- <div>
                    <button class="edit-address" data-id="">EDIT</button>
                    <button class="remove-address">REMOVE</button>
                  </div> -->
                </div>
                <% }); %>
            </div>


          </div>
          <div class="col-md-6">
            <div class="row mb-5">
              <div class="col-md-12">
                <h2 class="h3 mb-3 text-black">Coupon Code</h2>
                <div class="p-3 p-lg-5 border bg-white">
                  <label for="c_code" class="text-black mb-3">Enter your coupon code if you have one</label>
                  <div class="input-group w-75 couponcode-wrap">
                    <input type="text" class="form-control me-2" id="c_code" placeholder="Coupon Code"
                      aria-label="Coupon Code" aria-describedby="button-addon2" />
                    <div class="input-group-append">
                      <button class="btn" style="background-color: rgb(47, 120, 47); color: white" type="button"
                        id="button-addon2">
                        Apply
                      </button>
                      <button class="btn btn-black btn-sm" style="background-color: rgb(186, 35, 35); color: white"
                        type="button" id="button-remove2">
                        Remove
                      </button>
                    </div>
                  </div>
                  <p class="couponcodemsg" style="color:rgb(10, 188, 10)"></p>
                </div>
              </div>
            </div>

            <div class="row mb-5">
              <div class="col-md-12">
                <h2 class="h3 mb-3 text-black">Your Order</h2>
                <div class="p-3 p-lg-5 border bg-white">
                  <table class="table site-block-order-table mb-5">
                    <thead>
                      <tr>
                        <th>Image</th>
                        <th>Product</th>
                        <th>Total</th>
                      </tr>
                    </thead>
                    <tbody>
                      <% cart.items.forEach((item)=> { %>
                        <tr>
                          <td>
                            <img src="/<%= item.productId.images[0] %>" alt="<%= item.productId.name %>"
                              style="width: 50px; height: auto" />
                          </td>
                          <td>
                            <%= item.productId.name %>
                              <strong class="mx-2">x</strong>
                              <%= item.quantity %>
                          </td>
                          <td>₹<%= (item.offerPrice * item.quantity).toFixed(2) %>
                          </td>
                        </tr>
                        <% }); %>
                    </tbody>
                    <tfoot>
                      <tr>
                        <th colspan="2">Subtotal</th>
                        <td>₹<%= (cart.subtotal || 0).toFixed(2) %>
                        </td>
                      </tr>
                      <tr>
                        <th colspan="2">Shipping</th>
                        <td>₹<%= (cart.shippingCost || 0).toFixed(2) %>
                        </td>
                      </tr>
                      <tr>
                        <th colspan="2">Discount</th>
                        <td id="discount">₹0.00</td> <!-- Discount element added -->
                      </tr>
                      <tr>
                        <th colspan="2">Grand Total</th>
                        <td id="cart-total"><strong>₹<%= (cart.cartTotal || 0).toFixed(2) %></strong></td>
                        <!-- Cart total element updated with id -->
                      </tr>
                    </tfoot>

                  </table>
                </div>
              </div>
              <br>
              <br>
              <div class="border p-3 mb-3">
                <div>
                  <!-- Radio Button with ID -->
                  <input type="radio" name="payment" id="razerpay" />

                  <!-- Label for the Radio Button -->
                  <label for="razerpay">
                    <h3 class="h6 mb-0">
                      <a class="d-block" data-bs-toggle="collapse" href="#collapsebank" role="button"
                        aria-expanded="false" aria-controls="collapsepaypal" style="text-decoration: none">
                        Bank Transfer
                      </a>
                    </h3>
                  </label>
                </div>

                <div class="collapse" id="collapsebank">
                  <div class="py-2">
                    <p class="mb-0">
                      Make your payment directly into our bank account.
                      Please use your Order ID as the payment reference.
                      Your order won’t be shipped until the funds have
                      cleared in our account.
                    </p>
                  </div>
                </div>
              </div>

              <div class="border p-3 mb-3">
                <div>
                  <!-- Radio Button with ID -->
                  <input type="radio" name="payment" id="cash-on-delivery" />

                  <!-- Label for the Radio Button -->
                  <label for="cash-on-delivery">
                    <h3 class="h6 mb-0">
                      <a class="d-block" data-bs-toggle="collapse" href="#collapsecod" role="button"
                        aria-expanded="false" aria-controls="collapsecod" style="text-decoration: none">
                        Cash on Delivery
                      </a>
                    </h3>
                  </label>
                </div>
                <div class="collapse" id="collapsecod">
                  <div class="py-2">
                    <p class="mb-0">
                      Make your payment even after the product reached to you.
                      after the item is delivered to you, you can pay the
                      amount.
                    </p>
                  </div>
                </div>
              </div>

              <div class="border p-3 mb-5">
                <div>
                  <!-- Radio Button with ID -->
                  <input type="radio" name="payment" id="razorpay" />

                  <!-- Label for the Radio Button -->
                  <label for="razorpay">
                    <h3 class="h6 mb-0">
                      <a class="d-block" data-bs-toggle="collapse" href="#collapsepaypal" role="button"
                        aria-expanded="false" aria-controls="collapsepaypal" style="text-decoration: none">
                        Razor Pay
                      </a>
                    </h3>
                  </label>
                </div>

                <div class="collapse" id="collapsepaypal">
                  <div class="py-2">
                    <p class="mb-0">
                      Make your payment directly into our bank account.
                      Please use your Order ID as the payment reference.
                      Your order won’t be shipped until the funds have
                      cleared in our account.
                    </p>
                  </div>
                </div>
              </div>

              <div class="form-group">
                <button class="place-order-button" onclick="validateOrder()">
                  Place Order
                </button>
              </div>

            </div>
          </div>
        </div>
      </div>
    </div>
    <!-- </form> -->
    </div>
    </div>

    <%- include("./layouts/footer.ejs") %>

      <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
      <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


      <script>
        document.getElementById('button-remove2').addEventListener("click", function () {
          Swal.fire({
            title: "Are you sure?",
            text: "You won't be able to revert this!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#3085d6",
            cancelButtonColor: "#d33",
            confirmButtonText: "Yes, remove it!"
          }).then((result) => {
            if (result.isConfirmed) {
              Swal.fire({
                title: "Deleted!",
                text: "Your file has been deleted.",
                icon: "success",
                showCancelButton: false,
                timer: 1500
              });
            }
          });

          setTimeout(() => {
            window.location.reload();
          }, 1500)

        })


      </script>
      <script>
        const userId = "<%= userId %>";
        document.getElementById("button-addon2").addEventListener("click", async function () {
          const couponCode = document.getElementById("c_code").value.trim();
          console.log(couponCode)

          document.querySelector(".couponcodemsg").innerHTML = "";
          if (!couponCode) {
            const couponMsg = document.querySelector(".couponcodemsg")
            couponMsg.innerHTML = "Please enter a coupon code.";
            couponMsg.style.color = "red";
            return;
          }

          try {
            const response = await fetch(`/apply-coupon/${userId}`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ couponCode }),
            });

            const data = await response.json();

            if (data.success) {
              // Update the cart totals dynamically
              document.getElementById("cart-total").textContent = `₹${data.cartTotal.toFixed(2)}`;
              document.getElementById("discount").textContent = ` ₹${data.discount.toFixed(2)}`;
              const couponMsg = document.querySelector(".couponcodemsg")
              couponMsg.innerHTML = data.message;
              couponMsg.style.color = "green";
            } else {
              const couponMsg = document.querySelector(".couponcodemsg")
              couponMsg.innerHTML = data.message;
              couponMsg.style.color = "red";
            }
          } catch (error) {
            console.error("Error applying coupon:", error);
            swal.fire({
              icon: 'error',
              title: 'Error',
              text: 'An error occurred while applying the coupon.'

            });
          }
        });
      </script>

      <script>
        async function validateOrder() {
          const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
          const selectedPayment = document.querySelector('input[name="payment"]:checked');

          // Validate inputs
          if (!selectedAddress) {
            Swal.fire({ icon: 'error', title: 'Address not selected', text: 'Please select an address.' });
            return;
          }
          if (!selectedPayment) {
            Swal.fire({ icon: 'error', title: 'Payment Method not selected', text: 'Please select a payment method.' });
            return;
          }

          try {
            // Fetch cart items
            const response = await fetch('/fetch-cart', { method: 'GET', headers: { 'Content-Type': 'application/json' } });
            const cartData = await response.json();
            const cartItems = cartData.cart.items;

            if (!cartItems || cartItems.length === 0) {
              Swal.fire({ icon: 'error', title: 'Cart is Empty', text: 'Add items to the cart before placing an order.' });
              return;
            }

            const orderPayload = {
              selectedAddress: selectedAddress.value,
              items: cartItems,
            };

            if (selectedPayment.id === 'cash-on-delivery') {
              // Place COD order
              const orderResponse = await fetch('/place-order', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(orderPayload),
              });
              const orderData = await orderResponse.json();

              if (orderData.val) {
                Swal.fire({ icon: 'success', title: 'Order Placed', text: orderData.msg }).then(() => {
                  window.location = '/thankyou';
                });
              } else {
                Swal.fire({ icon: 'error', title: 'Order Failed', text: orderData.msg });
              }
            } else if (selectedPayment.id === 'razorpay') {
              // Place Razorpay order
              const razorpayOrderResponse = await fetch('/place-order-razorpay', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(orderPayload),
              });
              const razorpayOrderData = await razorpayOrderResponse.json();

              if (razorpayOrderData.val) {
                const razorpayOptions = {
                  key: 'rzp_test_mUKkruYO0ysf3W', // Your Razorpay Key
                  amount: razorpayOrderData.amount, // Amount in paise
                  currency: 'INR',
                  name: 'Your Company Name',
                  description: 'Order Payment',
                  order_id: razorpayOrderData.razorpayOrderId,
                  handler: async function (response) {
                    // Verify payment
                    const verifyResponse = await fetch('/verify-razorpay-payment', {
                      method: 'POST',
                      headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify({
                        paymentId: response.razorpay_payment_id,
                        orderId: razorpayOrderData.razorpayOrderId,
                        razorpaySignature: response.razorpay_signature,
                      }),
                    });
                    const verifyData = await verifyResponse.json();

                    if (verifyData.success) {
                      Swal.fire({ icon: 'success', title: 'Payment Successful', text: 'Order placed successfully!' }).then(() => {
                        window.location = '/thankyou';
                      });
                    } else {
                      Swal.fire({ icon: 'error', title: 'Payment Failed', text: verifyData.msg });
                    }
                  },
                  prefill: {
                    name: 'Customer Name',
                    email: 'customer@example.com',
                  },
                  theme: {
                    color: '#F37254',
                  },
                };

                const razorpay = new Razorpay(razorpayOptions);
                razorpay.open();
              } else {
                Swal.fire({ icon: 'error', title: 'Order Creation Failed', text: razorpayOrderData.msg });
              }
            }
          } catch (error) {
            console.error('Error during order process:', error);
            Swal.fire({ icon: 'error', title: 'Error', text: 'An error occurred while placing the order.' });
          }
        }

      </script>

      <script>

        function addressAddForm(e) {
          e.preventDefault();
          document.querySelector("#addressForm").style.display = "block";
          document.querySelector("#addAddress").style.display = "none"
          document.querySelector("#cancelAddress").style.display = "block"
        }
        function cancelAddress(e) {
          e.preventDefault()
          document.querySelector("#addressForm").style.display = "none";
          document.querySelector("#cancelAddress").style.display = "none"
          document.querySelector("#addAddress").style.display = "block"
        }

        function addressFormValidation(e) {
          e.preventDefault();
          console.log("Validation triggered");

          // Clear previous error messages
          document.getElementById("houseNumberError").innerText = "";
          document.getElementById("streetError").innerText = "";
          document.getElementById("cityError").innerText = "";
          document.getElementById("landmarkError").innerText = "";
          document.getElementById("districtError").innerText = "";
          document.getElementById("stateError").innerText = "";
          document.getElementById("CountryError").innerText = "";
          document.getElementById("pinCodeError").innerText = "";

          // Get input values
          const houseNumber = document.getElementById("houseNumber").value.trim();
          const street = document.getElementById("street").value.trim();
          const city = document.getElementById("city").value.trim();
          const landmark = document.getElementById("landmark").value.trim();
          const district = document.getElementById("district").value.trim();
          const state = document.getElementById("state").value.trim();
          const country = document.getElementById("Country").value.trim();
          const pinCode = document.getElementById("pinCode").value.trim();

          let valid = true;

          // Validation patterns
          const houseNumberPattern = /^[a-zA-Z0-9\s]+$/; // Letters, numbers, and spaces
          const streetPattern = /^[a-zA-Z\s]+$/; // Letters and spaces
          const cityPattern = /^[a-zA-Z\s]+$/; // Letters and spaces
          const landmarkPattern = /^[a-zA-Z0-9\s]+$/; // Letters, numbers, and spaces
          const districtPattern = /^[a-zA-Z\s]+$/; // Letters and spaces
          const statePattern = /^[a-zA-Z\s]+$/; // Letters and spaces
          const countryPattern = /^[a-zA-Z\s]+$/; // Letters and spaces
          const pinCodePattern = /^\d{6}$/; // Exactly 6 digits

          // Check for empty fields and display sweetalert for missing fields
          if (!houseNumber || !street || !city || !landmark || !district || !state || !country || !pinCode) {
            swal.fire({
              title: "Error",
              text: "All fields are required!",
              icon: "error",
              timer: 2500,
              showConfirmButton: false,
            });
            valid = false;
          }

          // House Number validation
          if (!houseNumberPattern.test(houseNumber)) {
            const error = document.getElementById("houseNumberError");
            error.innerText = "House Number can only contain letters, numbers, and spaces.";
            valid = false;
            setTimeout(() => (error.innerText = ""), 16000);
          }

          // Street validation
          if (!streetPattern.test(street)) {
            const error = document.getElementById("streetError");
            error.innerText = "Street can only contain letters and spaces.";
            valid = false;
            setTimeout(() => (error.innerText = ""), 16000);
          }

          // City validation
          if (!cityPattern.test(city)) {
            const error = document.getElementById("cityError");
            error.innerText = "City can only contain letters and spaces.";
            valid = false;
            setTimeout(() => (error.innerText = ""), 16000);
          }

          // Landmark validation
          if (!landmarkPattern.test(landmark)) {
            const error = document.getElementById("landmarkError");
            error.innerText = "Landmark can only contain letters, numbers, and spaces.";
            valid = false;
            setTimeout(() => (error.innerText = ""), 16000);
          }

          // District validation
          if (!districtPattern.test(district)) {
            const error = document.getElementById("districtError");
            error.innerText = "District can only contain letters and spaces.";
            valid = false;
            setTimeout(() => (error.innerText = ""), 16000);
          }

          // State validation
          if (!statePattern.test(state)) {
            const error = document.getElementById("stateError");
            error.innerText = "State can only contain letters and spaces.";
            valid = false;
            setTimeout(() => (error.innerText = ""), 16000);
          }

          // Country validation
          if (!countryPattern.test(country)) {
            const error = document.getElementById("CountryError");
            error.innerText = "Country can only contain letters and spaces.";
            valid = false;
            setTimeout(() => (error.innerText = ""), 16000);
          }

          // Pin Code validation
          if (!pinCodePattern.test(pinCode)) {
            const error = document.getElementById("pinCodeError");
            error.innerText = "Pin Code must be exactly 6 digits.";
            valid = false;
            setTimeout(() => (error.innerText = ""), 16000);
          }

          // Submit form if valid
          if (valid) {

            async function fetchData() {

              console.log("Here now!")
              try {
                const response = await fetch('/my-address', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                    houseNumber: houseNumber,
                    street: street,
                    city: city,
                    landmark: landmark,
                    district: district,
                    state: state,
                    country: country,
                    pinCode: pinCode
                  })
                });
                const data = await response.json();
                if (data.st === false) {
                  if (data.type === "houseNumber") {
                    document.getElementById("houseNumberError").innerText = data.msg;
                    setTimeout(() => (document.getElementById("houseNumberError").innerText = ""), 16000);
                  } else if (data.type === "street") {
                    document.getElementById("streetError").innerText = data.msg;
                    setTimeout(() => (document.getElementById("streetError").innerText = ""), 16000);
                  } else if (data.type === "city") {
                    document.getElementById("cityError").innerText = data.msg;
                    setTimeout(() => (document.getElementById("cityError").innerText = ""), 16000);
                  } else if (data.type === "landmark") {
                    document.getElementById("landmarkError").innerText = data.msg;
                    setTimeout(() => (document.getElementById("landmarkError").innerText = ""), 16000);
                  } else if (data.type === "district") {
                    document.getElementById("districtError").innerText = data.msg;
                    setTimeout(() => (document.getElementById("districtError").innerText = ""), 16000);
                  } else if (data.type === "state") {
                    document.getElementById("stateError").innerText = data.msg;
                    setTimeout(() => (document.getElementById("stateError").innerText = ""), 16000);
                  } else if (data.type === "country") {
                    document.getElementById("countryError").innerText = data.msg;
                    setTimeout(() => (document.getElementById("countryError").innerText = ""), 16000);
                  } else if (data.type === "pinCode") {
                    document.getElementById('pinCodeError').innerText = data.msg;
                    setTimeout(() => (document.getElementById('pinCodeError').innerText = ""), 16000);
                  }
                } else {
                  swal.fire("Address Added Successfully");
                  console.log(data.msg);
                  setTimeout(() => {

                    window.location.reload();
                  }, 2000)
                }
              } catch (error) {
                console.error('Error:', error);
              }
            }
            fetchData();
          }
          return valid;
        }
      </script>

      <!-- <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script> -->
      <script>
        // async function validateOrder() {
        //   const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
        //   const selectedPayment = document.querySelector('input[name="payment"]:checked');

        //   if (!selectedAddress) {
        //     Swal.fire({
        //       icon: 'error',
        //       title: 'Address not selected',
        //       text: 'Please select an address before placing your order.',
        //       confirmButtonText: 'OK',
        //     });
        //     return false;
        //   }

        //   if (!selectedPayment) {
        //     Swal.fire({
        //       icon: 'error',
        //       title: 'Payment method not selected',
        //       text: 'Please select a payment method before placing your order.',
        //       confirmButtonText: 'OK',
        //     });
        //     return false;
        //   }

        //   try {
        //     // Fetch cart items from the database
        //     const response = await fetch('/fetch-cart', {
        //       method: 'GET',
        //       headers: { 'Content-Type': 'application/json' },
        //     });

        //     if (!response.ok) {
        //       throw new Error('Failed to fetch cart items.');
        //     }

        //     const cartData = await response.json();
        //     const cartItems = cartData.cart.items; // Access the items array
        //     console.log(cartItems);

        //     if (!cartItems || cartItems.length === 0) {
        //       Swal.fire({
        //         icon: 'error',
        //         title: 'Cart is empty',
        //         text: 'Add items to the cart before placing an order.',
        //         confirmButtonText: 'OK',
        //       });
        //       return false;
        //     }

        //     // Send the order details to the backend
        //     const orderResponse = await fetch('/place-order', {
        //       method: 'POST',
        //       headers: { 'Content-Type': 'application/json' },
        //       body: JSON.stringify({
        //         selectedAddress: selectedAddress.value,
        //         paymentMethod: selectedPayment.id,
        //         items: cartItems,
        //       }),
        //     });

        //     const orderData = await orderResponse.json();

        //     if (orderData.val) {
        //       Swal.fire({
        //         icon: 'success',
        //         title: 'Order Placed Successfully',
        //         text: orderData.msg,
        //         confirmButtonText: 'OK',
        //       }).then(() => {
        //         window.location = '/thankyou'; // Redirect to thank you page
        //       });
        //     } else {
        //       Swal.fire({
        //         icon: 'error',
        //         title: 'Error',
        //         text: orderData.msg,
        //         confirmButtonText: 'OK',
        //       });
        //     }
        //   } catch (error) {
        //     console.error('Error during order validation:', error);
        //     Swal.fire({
        //       icon: 'error',
        //       title: 'Error',
        //       text: 'An error occurred while placing your order.',
        //       confirmButtonText: 'OK',
        //     });
        //   }
        // }
      </script>
      <script src="js/bootstrap.bundle.min.js"></script>
      <script src="js/tiny-slider.js"></script>
      <script src="js/custom.js"></script>
</body>

</html>